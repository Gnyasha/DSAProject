@page "/trie-view"
@using DSAProject.DataStorageModule
@using DSAProject.Models
@using DSAProject.OperationsModule
@inject ContactOperations contactOperations
@using DSAProject.UtilityModule
@using MudBlazor
@using System.Text
@using static DSAProject.DataStorageModule.Trie

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h5">Trie Structure Demo - Contact Names</MudText>
    <MudMarkdown Value="@markdownOutput" />
</MudContainer>

@code {
    private TrieNode TrieRoot { get; set; } = new TrieNode();
    private string markdownOutput = string.Empty;

    protected override void OnInitialized()
    {
        // Fetch sorted contacts and add them to the Trie
        var contacts = contactOperations.SortContacts();
        foreach (var contact in contacts)
        {
            AddContactToTrie(contact.Name, contact.Phone);
        }

        // Generator for markdown representation of the Trie
        var markdownGenerator = new TrieMarkdownGenerator(TrieRoot);
        markdownOutput = markdownGenerator.GenerateMarkdown();
    }

    private void AddContactToTrie(string contactName, string phoneNumber)
    {
        var currentNode = TrieRoot;
        foreach (char character in contactName)
        {
            if (!currentNode.Children.ContainsKey(character))
            {
                currentNode.Children[character] = new TrieNode();
            }
            currentNode = currentNode.Children[character];
        }

        // Only initialize the Contact object at the end of the word
        currentNode.IsEndOfWord = true;
        currentNode.Contact = new Contact
            {
                Name = contactName,
                Phone = phoneNumber
            };
    }
}
