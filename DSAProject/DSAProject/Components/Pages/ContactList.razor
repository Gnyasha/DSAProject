@page "/contact-list"
@using DSAProject.Models
@using DSAProject.OperationsModule
@using DSAProject.UtilityModule
@inject ContactOperations contactOperations

<h3>Contact List</h3>

<div class="container mt-4">
    @if (Contacts.Count == 0)
    {
        <div class="alert alert-warning">No contacts available.</div>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Phone</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in Contacts)
                {
                    <tr>
                        <td>@contact.Name</td>
                        <td>@contact.Phone</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => EditContact(contact)">Edit</button>
                            <button class="btn btn-danger btn-sm ml-2" @onclick="() => DeleteContact(contact)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (EditingContact != null)
    {
        <h4>Edit Contact</h4>
        <form @onsubmit="HandleUpdate">
            <div class="form-group">
                <label for="editName">Name</label>
                <input type="text" class="form-control" id="editName" @bind="EditingContact.Name" required />
            </div>

            <div class="form-group">
                <label for="editPhone">Phone Number</label>
                <input type="text" class="form-control" id="editPhone" @bind="EditingContact.Phone" required />
                <small class="form-text text-muted">Phone number must start with '0' and be 5 digits long.</small>
            </div>

            <button type="submit" class="btn btn-primary">Update Contact</button>
            <button type="button" class="btn btn-secondary ml-2" @onclick="CancelEdit">Cancel</button>
        </form>
    }

    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="alert alert-info mt-3">@Message</div>
    }
</div>

@code {
    private List<Contact> Contacts { get; set; } = new List<Contact>();
    private Contact EditingContact { get; set; }
    private string Message { get; set; }

    protected override void OnInitialized()
    {
        LoadContacts();
    }

    private void LoadContacts()
    {
        Contacts = contactOperations.SortContacts();
    }

    private void EditContact(Contact contact)
    {
        EditingContact = new Contact
            {
                Name = contact.Name,
                Phone = contact.Phone
            };
    }

    private async Task HandleUpdate()
    {
        if (PhoneNumberValidator.ValidatePhoneNumber(EditingContact.Phone))
        {
            contactOperations.UpdateContact(EditingContact.Name, EditingContact.Phone);
            Message = $"Contact '{EditingContact.Name}' updated successfully.";
            LoadContacts();
            CancelEdit();
        }
        else
        {
            Message = "Invalid phone number. Please ensure it starts with '0' and is exactly 5 digits.";
        }
    }

    private void DeleteContact(Contact contact)
    {
        contactOperations.DeleteContact(contact.Name);
        Message = $"Contact '{contact.Name}' deleted successfully.";
        LoadContacts();
    }

    private void CancelEdit()
    {
        EditingContact = null;
    }
}
